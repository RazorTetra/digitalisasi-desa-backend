// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  namaDepan     String
  namaBelakang  String
  nomorHp       String
  email         String    @unique
  password      String
  role          Role      @default(USER)
}

enum Role {
  ADMIN
  USER
}

model VillageInfo {
  id          String   @id @default(uuid())
  history     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VillageStructure {
  id          String   @id @default(uuid())
  position    String
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Gallery {
  id          String   @id @default(uuid())
  imageUrl    String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SocialMedia {
  id          String   @id @default(uuid())
  platform    String   @unique
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Kategori {
  id        String   @id @default(uuid())
  nama      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Pengumuman Pengumuman[]
}

model Pengumuman {
  id        String   @id @default(uuid())
  judul     String
  isi       String
  tanggal   DateTime
  kategoriId String
  kategori  Kategori @relation(fields: [kategoriId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TamuWajibLapor {
  id             String   @id @default(uuid())
  trackingCode   String   @unique // Kode tracking untuk publik
  nama           String
  nik            String
  alamatAsal     String
  tujuan         String
  lamaMenginap   String
  tempatMenginap String
  nomorTelepon   String
  status         Status   @default(PENDING)
  statusMessage  String?  // Pesan optional dari admin
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([trackingCode])
}

model FormatSurat {
  id          String   @id @default(uuid())
  nama        String
  fileUrl     String
  filename    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}


model FinanceBanner {
  id          String   @id @default(uuid())
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FinanceInfo {
  id          String   @id @default(uuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FinanceIncomeItem {
  id            String   @id @default(uuid())
  uraian        String   @unique
  anggaran      Decimal  @db.Decimal(15, 2)
  realisasi     Decimal  @db.Decimal(15, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FinanceExpenseItem {
  id            String   @id @default(uuid())
  uraian        String   @unique
  anggaran      Decimal  @db.Decimal(15, 2)
  realisasi     Decimal  @db.Decimal(15, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FinanceFinancingItem {
  id            String   @id @default(uuid())
  uraian        String   @unique
  anggaran      Decimal  @db.Decimal(15, 2)
  realisasi     Decimal  @db.Decimal(15, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}



model BeritaKategori {
  id        String   @id @default(uuid())
  nama      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  berita    BeritaToKategori[]
}

model Berita {
  id          String   @id @default(uuid())
  judul       String
  slug        String   @unique
  ringkasan   String
  isi         String
  gambarUrl   String
  isHighlight Boolean  @default(false)
  penulis     String
  tanggal     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  kategori    BeritaToKategori[]

  @@index([slug])
  @@index([tanggal])
}

// Junction table untuk many-to-many relationship
model BeritaToKategori {
  berita      Berita         @relation(fields: [beritaId], references: [id], onDelete: Cascade)
  beritaId    String
  kategori    BeritaKategori @relation(fields: [kategoriId], references: [id], onDelete: Cascade)
  kategoriId  String
  assignedAt  DateTime       @default(now())

  @@id([beritaId, kategoriId])
}

model HeroBanner {
  id          String   @id @default(uuid())
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
